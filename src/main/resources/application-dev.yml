server:
  port: 8081
  servlet:
    encoding:
      charset: UTF-8
      force: true
    context-path: /
spring:
  ###########################################
  #               Database                  #
  ###########################################
  datasource:
    url: ${MARIADB_URL}/${MARIADB_NAME}
    driver-class-name: org.mariadb.jdbc.Driver
    username: ${MARIADB_USERNAME}
    password: ${MARIADB_PASSWORD}
  ###########################################
  #                  JPA                    #
  ###########################################
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: create-drop
    properties:
      '[hibernate.default_batch_fetch_size]': 100
      '[hibernate.format_sql]': true
      hibernate:
        format_sql: true
    show-sql: true
  ###########################################
  #                SECURITY                 #
  ###########################################
  security:
    oauth2:
      #########################################################################
      # Fetch metadata from an authorization server
      # Kakao:
      #  - https://kauth.kakao.com/.well-known/openid-configuration
      # Keycloak:
      #  -
      # Naver:
      #  -
      # Google:
      #  -
      ########################################################################
      client:
        registration:
          ###########################################
          #          REGISTRATION: GOOGLE           #
          ###########################################
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - profile
              - email
          ###########################################
          #          REGISTRATION: KEYCLOAK         #
          ###########################################
          keycloak:
            authorization-grant-type: authorization_code
            client-id: ${KC_CLIENT_ID}
            client-name: ${KC_CLIENT_NAME}
            client-secret: ${KC_CLIENT_SECRET}
            redirect-uri: http://localhost:8081/login/oauth2/code/keycloak
            client-authentication-method: client_secret_basic
            scope:
              - openid
              - profile
              - email
          ###########################################
          #                 NAVER                   #
          ###########################################
          naver:
            client-id: ${OAUTH2_NAVER_CLIENT_ID}
            client-secret: ${OAUTH2_NAVER_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            client-name: NAVER_LOGIN_API
            redirect-uri: http://localhost:8081/login/oauth2/code/naver
            scope:
              - profile
              - email
          ###########################################
          #                 GITHUB                  #
          ###########################################
          # 참고: https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app
          github:
            client-id: ${OAUTH2_GIT_CLIENT_ID}
            client-name: social_github
            client-secret: ${OAUTH2_GIT_CLIENT_SECRET}
            redirect-uri: http://localhost:8081/login/oauth2/code/github
            scope:
              - read:user
              - user:email
          ###########################################
          #                 KAKAO                   #
          ###########################################
          kakao:
            client-id: ${OAUTH2_KAKAO_REST_API_KEY}
            client-secret: ${OAUTH2_KAKAO_CLIENT_SECRET}
            client-name: ${OAUTH2_KAKAO_CLIENT_ID}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8081/login/oauth2/code/kakao
            scope:
              - openid
              - profile_nickname
              - profile_image
              - account_email
              
              
        provider:
          ###########################################
          #          PROVIDER: KEYCLOAK             #
          ###########################################
          keycloak:
            issuer-uri: http://localhost:8080/realms/oauth2
            authorization-uri: http://localhost:8080/realms/oauth2/protocol/openid-connect/auth
            token-uri: http://localhost:8080/realms/oauth2/protocol/openid-connect/token
            jwk-set-uri: http://localhost:8080/realms/oauth2/protocol/openid-connect/certs
            user-info-uri: http://localhost:8080/realms/oauth2/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
          
          ###########################################
          #                 NAVER                   #
          ###########################################
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          
          ###########################################
          #                 KAKAO                   #
          ###########################################
          # https://kauth.kakao.com/.well-known/openid-configuration
          kakao:
            # 사실, issuer uri 만 알고 있으면 ${baseUrl}/.well-knwon/openid-configuration 요청해서 메타데이터를 받아온다.
            # issuer-uri 만 설정하면 되지만, 명시적인 기록을 위해 적는다.
            issuer-uri: https://kauth.kakao.com # ${baseUrl} 역할
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            # openid connect 를 사용하는 경우
            user-info-uri: https://kapi.kakao.com/v1/oidc/userinfo
            # openid connect 를 사용하지 않는 경우
            # user-info-uri: https://kapi.kakao.com/v2/user/me
            jwk-set-uri: https://kauth.kakao.com/.well-known/jwks.json
            # openid connect 를 사용하는 경우에는 sub 여야 정상적으로 동작한다.
            user-name-attribute: sub

logging:
  level:
    '[jj.study.auctionbackend]': DEBUG
    '[org.hibernate.type]': TRACE
    
    
    
    